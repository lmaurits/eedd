#!/usr/bin/env python

import argparse
import sys
import time

import eedd

def read_to_file(ei, fp, skip=0, seek=0, count=0x2000, blocksize=128):
    
    start_time = time.time()
    read = 0
    address = skip
    if seek:
        fp.seek(seek)
    while read < count:
        remainder = count - read
        toread = min(remainder, blocksize)
        if toread == 1:
            fp.write(ei.read_byte(address))
        else:
            fp.write(ei.read_bytes(address, toread))
        read += toread
        address += toread
    end_time = time.time() 
    print_output(start_time, end_time, read)

def write_from_file(ei, fp, skip=0, seek=0, count=0x2000, blocksize=64):
   
    start_time = time.time() 
    address=seek
    if skip:
        fp.seek(skip)
    written = 0
    while written < count:
        data = fp.read(min(count, blocksize))
        if len(data) == 0:
            break
        elif len(data) == 1:
            ei.write_byte(address, data)
        else:
            ei.write_bytes(address, data)
        written += len(data)
        address += len(data)
        if address > 0x1FFF:
            break
    end_time = time.time() 
    print_output(start_time, end_time, written)

def print_output(start_time, end_time, size):
    duration = end_time - start_time
    if size < 1024:
        nice_size = "%d B" % size
    else:
        nice_size = "%.2f kB" % (size/1024.0)
    speed = size/duration
    if speed < 1024:
        nice_speed = "%d B/s" % speed
    else:
        nice_speed = "%.2f kB/s" % (speed/1024.0)
    sys.stderr.write("%d bytes (%s) copied, %.2f s, %s\n" % (size, nice_size, duration, nice_speed))

def erase_chip(ei):
    start_time = time.time() 
    ei.clear_chip()
    end_time = time.time() 
    duration = end_time - start_time
    print "Chip erased in %.2f s" % duration

def main():

    parser = argparse.ArgumentParser(description="Talk to EEPROM")
    parser.add_argument("--if", metavar='inputfile', type=str,
        help="Input file")
    parser.add_argument("--of", metavar='outputfile', type=str,
        help="Output file")
    parser.add_argument("--seek", metavar='BYTES', type=int,
        default=0, help="Skip over BYTES bytes at output")
    parser.add_argument("--skip", metavar='BYTES', type=int,
        default=0, help="Skip over BYTES bytes at input")
    parser.add_argument("--count", metavar='BYTES', type=int,
        default=0x2000, help="Transfer only BYTES bytes")
    parser.add_argument("--bs", metavar='BYTES', type=int,
        default=64, help="Use blocksize of BYTES when communicating with serial device")
    parser.add_argument("--erase", metavar='chipdevice', type=str,
        help="Device file to erase")
    args = parser.parse_args()
    args = vars(args) 
    
    if args["if"] and args["of"]:
        if args["if"].startswith("/dev/"):
            # Looks like we're reading from EEPROM to a file
            ei = eedd.EepromInterface(args["if"], 57600)
            with open(args["of"], "wb") as fp:
                read_to_file(ei, fp, skip=args["skip"], seek=args["seek"], count=args["count"], blocksize=args["bs"])
        elif args["of"].startswith("/dev/"):
            # Looks like we're writing from a file to EEPROM
            ei = eedd.EepromInterface(args["of"], 57600)
            with open(args["if"], "rb") as fp:
                write_from_file(ei, fp, skip=args["skip"], seek=args["seek"], count=args["count"], blocksize=args["bs"])
                # Patch the first byte, which is mysteriously failing...
                fp.seek(0)
                write_from_file(ei, fp, count=1, blocksize=1)
        else:
            # Buh?
            print "Neither if nor of look like a serial device?"
    elif args["if"] and args["if"].startswith("/dev/"):
        # Looks like we're reading from EEPROM to stdout
        ei = eedd.EepromInterface(args["if"], 57600)
        read_to_file(ei, sys.stdout, seek=args["seek"], count=args["count"], blocksize=args["bs"])
    elif args["erase"] and args["erase"].startswith("/dev/"):
        ei = eedd.EepromInterface(args["erase"], 57600)
        erase_chip(ei)

    ei.park()
    ei.close()

if __name__ == "__main__":
    main()
