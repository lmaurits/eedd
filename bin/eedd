#!/usr/bin/env python

import argparse
import sys
import time

import eedd

def read_to_file(ei, filename):
    
    start_time = time.time() 
    with open(filename, "wb") as fp:
        for address in range(0,0x2000,128):
            fp.write(ei.read_bytes(address, 128))
    end_time = time.time() 
    print_output(start_time, end_time, address+128)

def read_to_stdout(ei):

    start_time = time.time() 
    for address in range(0,0x2000,128):
        bytes_ = ei.read_bytes(address, 128)
        sys.stdout.write(bytes_)
    end_time = time.time() 
    print_output(start_time, end_time, address+128)
            
def write_from_file(ei, filename):
    start_time = time.time() 
    with open(filename, "rb") as fp:
        data = fp.read()
    for address, byte in enumerate(data):
        ei.write_byte(address, byte)
    end_time = time.time() 
    print_output(start_time, end_time, address)

def fast_write_from_file(ei, filename):
   
    start_time = time.time() 
    address = 0
    with open(filename, "rb") as fp:
        while True:
            data = fp.read(64)
            if len(data) == 0:
                break
            ei.write_bytes(address, data)
            address += len(data)
            if address > 0x1FFF:
                break
    end_time = time.time() 
    print_output(start_time, end_time, address)

def print_output(start_time, end_time, size):
    duration = end_time - start_time
    if size < 1024:
        nice_size = "%d B" % size
    else:
        nice_size = "%.2f kB" % (size/1024.0)
    speed = size/duration
    if speed < 1024:
        nice_speed = "%d B/s" % speed
    else:
        nice_speed = "%.2f kB/s" % (speed/1024.0)
    print "%d bytes (%s) copied, %.2f s, %s" % (size, nice_size, duration, nice_speed)

def erase_chip(ei):
    start_time = time.time() 
    ei.clear_chip()
    end_time = time.time() 
    duration = end_time - start_time
    print "Chip erased in %.2f s" % duration

def main():

    parser = argparse.ArgumentParser(description="Talk to EEPROM")
    parser.add_argument("--if", metavar='inputfile', type=str,
        help="Input file")
    parser.add_argument("--of", metavar='outputfile', type=str,
        help="Output file")
    parser.add_argument("--erase", metavar='chipdevice', type=str,
        help="Device file to erase")
    args = parser.parse_args()
    args = vars(args) 
    
    if args["if"] and args["of"]:
        if args["if"].startswith("/dev/"):
            # Looks like we're reading from EEPROM to a file
            ei = eedd.EepromInterface(args["if"], 57600)
            read_to_file(ei, args["of"])
        elif args["of"].startswith("/dev/"):
            # Looks like we're writing from a file to EEPROM
            ei = eedd.EepromInterface(args["of"], 57600)
            fast_write_from_file(ei, args["if"])
        else:
            # Buh?
            print "Neither if nor of look like a serial device?"
    elif args["if"] and args["if"].startswith("/dev/"):
        # Looks like we're reading from EEPROM to stdout
        ei = eedd.EepromInterface(args["if"], 57600)
        read_to_stdout(ei)
    elif args["erase"] and args["erase"].startswith("/dev/"):
        ei = eedd.EepromInterface(args["erase"], 57600)
        erase_chip(ei)

if __name__ == "__main__":
    main()
